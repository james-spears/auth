"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path
# from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ["SECRET_KEY"]
SIGNER_SALT = "himalayan_pink"
HOST_DOMAIN = os.getenv("HOST_DOMAIN", None)
ALLOWED_HOSTS = [HOST_DOMAIN] if HOST_DOMAIN else []

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG") == '1' or False
if DEBUG:
    ALLOWED_HOSTS += ['*']
else:
    ALLOWED_HOSTS += ['127.0.0.1', 'localhost',]


if os.getenv("LOG_LEVEL") == '0':
    LOG_LEVEL = "DEBUG"
elif os.getenv("LOG_LEVEL") == '1':
    LOG_LEVEL = "INFO"
else:
    LOG_LEVEL = "WARNING"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": LOG_LEVEL,
            "propagate": False,
        },
    },
}

CSRF_TRUSTED_ORIGINS = ['http://localhost:8080']
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    "debug_toolbar",
    'accounts',
]

MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'app.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        "DIRS": [BASE_DIR / "templates"],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app.wsgi.application'

LOGO_URL = os.getenv("LOGO_URL", None)
# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Define the directory for your SQLite database
# Or any other desired sub-directory
# DB_DIR = BASE_DIR / "data"

# # Ensure the directory exists
# DB_DIR.mkdir(parents=True, exist_ok=True)

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': DB_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DATABASE_NAME", "postgres"),
        "USER": os.getenv("DATABASE_USER", "postgres"),
        "PASSWORD": os.getenv("DATABASE_PASSWORD", "postgres"),
        "HOST": os.getenv("DATABASE_HOST", "127.0.0.1"),
        "PORT": os.getenv("DATABASE_PORT", "5432"),
    }
}

X_AUTHORIZATION_KEY = 'x_authorization_key'

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://cache:6379/0",
    },
    'auth': {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://cache:6379/1",
        "OPTIONS": {
            "SERIALIZER": "django_redis.serializers.json.JSONSerializer",
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

if DEBUG:
    STATIC_ROOT = 'assets'
else:
    STATIC_ROOT = "/var/www/com/static/"

STATIC_URL = "static/"

STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = ['accounts.backends.EmailBackend']

LOGIN_REDIRECT_URL = os.getenv("LOGIN_REDIRECT_URL", "accounts")
LOGOUT_REDIRECT_URL = os.getenv("LOGOUT_REDIRECT_URL", "login")

EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# Replace with your SMTP server host
EMAIL_HOST = 'mail.smtp2go.com'
EMAIL_PORT = 2525  # Common ports: 587 for TLS, 465 for SSL
EMAIL_USE_TLS = True  # Set to True for TLS, False for SSL
# Set to True if using SSL (usually mutually exclusive with EMAIL_USE_TLS)
EMAIL_USE_SSL = False
# Your email address for SMTP authentication
EMAIL_HOST_USER = os.environ["EMAIL_HOST_USER"]
# Your email password or app-specific password
EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]
# Default sender email address
DEFAULT_FROM_EMAIL = 'no-reply@fastinvites.com'


MEDIA_FOLDER = 'media'
MEDIA_ROOT = os.path.join(BASE_DIR, MEDIA_FOLDER)
MEDIA_URL = '/media/'

APPEND_SLASH = True

# Adjust if RabbitMQ is not on localhost
CELERY_BROKER_URL = os.getenv(
    "CELERY_BROKER_URL", 'amqp://guest:guest@mq:5672//')
# using redis as a results backend
CELERY_RESULT_BACKEND = os.getenv(
    "CELERY_RESULT_BACKEND", 'redis://cache:6379/2')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
# Replace with your timezone
CELERY_TIMEZONE = 'America/Toronto'

# GitHub

# CLIENT_ID = "Iv23li2jaun7ulBanvzP"
# CLIENT_SECRET = "f94ebef733eaa7708d6d84208c1118bc1d76ec51"

# Models
AUTH_USER_MODEL = "accounts.User"

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAdminUser',
    ]
}
